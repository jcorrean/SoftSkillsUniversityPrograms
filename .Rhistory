library(readr)
Data_Figure2 <- read_csv("Documents/GitHub/SoftSkillsUniversityPrograms/Data Figure2.csv")
library(readr)
Data_Figure2 <- read_csv("Documents/GitHub/SoftSkillsUniversityPrograms/Data Figure2.csv")
library(readr)
Data_Figure2 <- read_csv("Documents/GitHub/SoftSkillsUniversityPrograms/Data_Figure2.csv")
library(readr)
Data_Figure2 <- read_csv("Data_Figure2.csv")
View(Data_Figure2)
load("~/Documents/GitHub/SoftSkillsUniversityPrograms/PreProcessing.RData")
rm(list=setdiff(ls(), "TODAS"))
TODAS$keyword <- tolower(TODAS$keyword)
Dictionary <- data.frame(table(TODAS$keyword))
Network <- TODAS[,c(1,5)]
table(Network$keyword)
verbos <- data.frame(table(Network$keyword))
#write.csv(verbos, file="verbos.csv")
Network <- Network[!duplicated(Network[c(1,2)]),]
verbos <- data.frame(table(Network$keyword))
library(igraph)
bn2 <- graph.data.frame(Network,directed=FALSE)
igraph::degree(bn2)
bipartite.mapping(bn2)
V(bn2)$type <- bipartite_mapping(bn2)$type
V(bn2)$color <- ifelse(V(bn2)$type, "red", "green")
V(bn2)$shape <- ifelse(V(bn2)$type, "circle", "square")
#V(bn2)$label.cex <- ifelse(V(bn2)$type, 0.8, 1)
V(bn2)$size <- 3.5
E(bn2)$color <- "grey"
plot(bn2,
vertex.label = NA,
layout = layout_nicely,
main = "")
summary(bn2)
V(bn2)$name[1:10]
table(V(bn2)$type)
V(bn2)$color[1:10]
V(bn2)$shape[1:10]
# Network node prominence measures
Degrees <- data.frame(igraph::degree(bn2))
Betweenness <- data.frame(igraph::betweenness(bn2))
Closeness <- data.frame(igraph::closeness(bn2))
Eigen <- data.frame(igraph::eigen_centrality(bn2))
table(igraph::degree(bn2,v=V(bn2)[type==FALSE]))
mean(igraph::degree(bn2,v=V(bn2)[type==FALSE]))
var(igraph::degree(bn2,v=V(bn2)[type==FALSE]))
min(igraph::degree(bn2,v=V(bn2)[type==FALSE]))
max(igraph::degree(bn2,v=V(bn2)[type==FALSE]))
edge_density(bn2)
library(igraph)
bn2 <- graph.data.frame(Network,directed=FALSE)
bipartite.mapping(bn2)
V(bn2)$type <- bipartite_mapping(bn2)$type
V(bn2)$color <- ifelse(V(bn2)$type, "red", "green")
V(bn2)$shape <- ifelse(V(bn2)$type, "circle", "square")
V(bn2)$label.cex <- ifelse(V(bn2)$type, 0.8, 1)
V(bn2)$size <- sqrt(igraph::degree(bn2))
E(bn2)$color <- "lightgrey"
plot(bn2,
vertex.label = NA,
layout = layout_as_bipartite,
main = "")
summary(bn2)
table(igraph::degree(bn2,v=V(bn2)[type==FALSE]))
mean(igraph::degree(bn2,v=V(bn2)[type==FALSE]))
Terms <- bn2.pr$proj2
bn2.pr <- bipartite.projection(bn2)
max(igraph::degree(Programs))
Programs <- bn2.pr$proj1
Terms <- bn2.pr$proj2
SkillsCentrality <- data.frame(Degree = degree(Terms),
Closeness = closeness(Terms),
Betweennes = betweenness(Terms),
Eigen = eigen_centrality(Terms))
View(SkillsCentrality)
View(SkillsCentrality)
library(GGally)
load("~/Documents/GitHub/SoftSkillsUniversityPrograms/ResultsbyProgram.RData")
load("~/Documents/GitHub/SoftSkillsUniversityPrograms/ResultsbyAccreditation.RData")
library(datawizard)
dat <- dat %>% mutate(., degree.rescaled = ifelse(Degree == 0, 0.00, rescale(dat$Degree, to = c(0,1))))
dat <- dat %>% mutate(., closeness.rescaled = ifelse(Closeness == 0, 0.00, rescale(dat$Closeness, to = c(0,1))))
dat <- dat %>% mutate(., betweennes.rescaled = ifelse(Betweennes == 0, 0.00, rescale(dat$Betweennes, to = c(0,1))))
dat <- dat %>% mutate(., eigenvector.rescaled = ifelse(Eigen.vector == 0, 0.00, rescale(dat$Eigen.vector, to = c(0,1))))
summary(dat$eigenvector.rescaled)
summary(dat$degree.rescaled)
summary(dat$betweennes.rescaled)
summary(dat$closeness.rescaled)
colnames(dat)
p1 <- ggplot(dat, aes(x = reorder(SS, degree.rescaled), y = degree.rescaled)) +
geom_bar(stat = "identity", fill="lightgreen") + theme_bw() +
theme(axis.text.x=element_text(size=25, colour="black")) +
theme(axis.text.y=element_text(size=25, colour="black")) +
theme(axis.title.x=element_text(face="italic", colour="black", size=25)) +
theme(axis.title.y=element_text(face="italic", colour="black", size=25)) +
coord_flip() + xlab("Soft Skills") + ylab("Degree Centrality (rescaled 0-1)")
p1
dat <- SoftSkillsCentrality %>% filter(., Level == "Doctorate")
library(datawizard)
dat <- dat %>% mutate(., degree.rescaled = ifelse(Degree == 0, 0.00, rescale(dat$Degree, to = c(0,1))))
dat <- dat %>% mutate(., closeness.rescaled = ifelse(Closeness == 0, 0.00, rescale(dat$Closeness, to = c(0,1))))
dat <- dat %>% mutate(., betweennes.rescaled = ifelse(Betweennes == 0, 0.00, rescale(dat$Betweennes, to = c(0,1))))
dat <- dat %>% mutate(., eigenvector.rescaled = ifelse(Eigen.vector == 0, 0.00, rescale(dat$Eigen.vector, to = c(0,1))))
summary(dat$eigenvector.rescaled)
dat <- SoftSkillsCentrality[1:5]
table(Resumen$Freq)
library(dplyr)
SoftSkillsCentrality <- Centralities %>% filter(., grepl('analizar|ayudar|compartir|competir|comprender|comunicar|crear|creatividad|dirigir|equipos|ético|evaluar|flexibilidad|fomentar|fortalecer|generar|gestionar|identificar|impulsar|innovar|interactuar|liderar|orientar|pensamiento crítico|persuasión|planificar|reconocer|reflexionar|resolver|responsable|tomar decisiones', SS))
dat <- SoftSkillsCentrality[1:5]
options(scipen = 999)
dat <- SoftSkillsCentrality %>% filter(., Level == "Doctorate")
library(datawizard)
dat <- dat %>% mutate(., degree.rescaled = ifelse(Degree == 0, 0.00, rescale(dat$Degree, to = c(0,1))))
dat <- dat %>% mutate(., closeness.rescaled = ifelse(Closeness == 0, 0.00, rescale(dat$Closeness, to = c(0,1))))
dat <- dat %>% mutate(., betweennes.rescaled = ifelse(Betweennes == 0, 0.00, rescale(dat$Betweennes, to = c(0,1))))
dat <- dat %>% mutate(., eigenvector.rescaled = ifelse(Eigen.vector == 0, 0.00, rescale(dat$Eigen.vector, to = c(0,1))))
summary(dat$eigenvector.rescaled)
summary(dat$degree.rescaled)
summary(dat$betweennes.rescaled)
summary(dat$closeness.rescaled)
colnames(dat)
p1 <- ggplot(dat, aes(x = reorder(SS, degree.rescaled), y = degree.rescaled)) +
geom_bar(stat = "identity", fill="lightgreen") + theme_bw() +
theme(axis.text.x=element_text(size=25, colour="black")) +
theme(axis.text.y=element_text(size=25, colour="black")) +
theme(axis.title.x=element_text(face="italic", colour="black", size=25)) +
theme(axis.title.y=element_text(face="italic", colour="black", size=25)) +
coord_flip() + xlab("Soft Skills") + ylab("Degree Centrality (rescaled 0-1)")
p1
View(dat)
