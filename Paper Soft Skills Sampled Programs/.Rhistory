install.packages(c("deSolve", "gdtools", "lm.beta", "testthat"))
library(bibliometrix)
biblioshiny()
library(scholar)
get_profile("fb0nE80AAAAJ&hl")
get_num_articles("fb0nE80AAAAJ&hl")
library(plyr)
# Summarize the ToothGrowth data
tg <- ddply(ToothGrowth, c("supp", "dose"), summarise, length=mean(len))
# Map supp to colour
ggplot(tg, aes(x=dose, y=length, colour=supp)) + geom_line()
library(ggplot2)
# Summarize the ToothGrowth data
tg <- ddply(ToothGrowth, c("supp", "dose"), summarise, length=mean(len))
# Map supp to colour
ggplot(tg, aes(x=dose, y=length, colour=supp)) + geom_line()
View(tg)
library(plyr)
library(ggplot2)
# Summarize the ToothGrowth data
tg <- ddply(ToothGrowth, c("supp", "dose"), summarise, length=mean(len))
# Map supp to colour
ggplot(tg, aes(x=dose, y=length, colour=supp)) + geom_line()
View(tg)
C1 <- c(1,1,1,0,0,0)
C2 <- c(0,1,1,1,0,0)
C3 <- c(0,0,1,1,1,0)
C4 <- c(0,0,0,0,1,1)
aff.df <- data.frame(C1,C2,C3,C4)
row.names(aff.df) <- c("S1","S2","S3","S4","S5","S6")
View(aff.df)
library(igraph)
bn <- graph.incidence(aff.df)
plt.x <- c(rep(2,6),rep(4,4))
plt.y <- c(7:2,6:3)
lay <- as.matrix(cbind(plt.x,plt.y))
library(igraph)
bn <- graph.incidence(aff.df)
plt.x <- c(rep(2,6),rep(4,4))
plt.y <- c(7:2,6:3)
lay <- as.matrix(cbind(plt.x,plt.y))
shapes <- c("circle","square")
colors <- c("blue","red")
plot(bn,vertex.color=colors[V(bn)$type+1],
vertex.shape=shapes[V(bn)$type+1],
vertex.size=10,vertex.label.degree=-pi/2,
vertex.label.dist=1.2,vertex.label.cex=0.9,
layout=lay)
View(aff.df)
View(aff.df)
install.packages(c("ggmap", "lavaan", "lme4", "qpdf", "rlang", "scatterplot3d", "vctrs"))
# load the required package
library(lattice)
# generate fictitious data
set.seed(123)
data <- data.frame(
Group = rep(c("A", "B", "C"), each = 10),
Value = rnorm(30, mean = c(10, 15, 20), sd = c(2, 3, 4))
)
# create a worm plot
wormplot(data$Value ~ data$Group,
type = "l",
col = c("red", "green", "blue"),
xlab = "Group",
ylab = "Value",
main = "Worm Plot Example")
# install and load the required package
install.packages("lattice")
install.packages("lattice")
library(lattice)
# generate fictitious data
set.seed(123)
data <- data.frame(
Group = rep(c("A", "B", "C"), each = 10),
Value = rnorm(30, mean = c(10, 15, 20), sd = c(2, 3, 4))
)
# create a worm plot
wormplot(data$Value ~ data$Group,
type = "l",
col = c("red", "green", "blue"),
xlab = "Group",
ylab = "Value",
main = "Worm Plot Example")
lattice::wormplot(data$Value ~ data$Group,
type = "l",
col = c("red", "green", "blue"),
xlab = "Group",
ylab = "Value",
main = "Worm Plot Example")
# install and load the required package
install.packages("latticeExtra")
library(latticeExtra)
# generate fictitious data
set.seed(123)
data <- data.frame(
Group = rep(c("A", "B", "C"), each = 10),
Value = rnorm(30, mean = c(10, 15, 20), sd = c(2, 3, 4))
)
# create a worm plot
wormplot(data$Value ~ data$Group,
type = "l",
col = c("red", "green", "blue"),
xlab = "Group",
ylab = "Value",
main = "Worm Plot Example")
library(latticeExtra)
# generate fictitious data
set.seed(123)
data <- data.frame(
Group = rep(c("A", "B", "C"), each = 10),
Value = rnorm(30, mean = c(10, 15, 20), sd = c(2, 3, 4))
)
# create a worm plot
wormplot(data$Value ~ data$Group,
type = "l",
col = c("red", "green", "blue"),
xlab = "Group",
ylab = "Value",
main = "Worm Plot Example")
latticeExtra::wormplot(data$Value ~ data$Group,
type = "l",
col = c("red", "green", "blue"),
xlab = "Group",
ylab = "Value",
main = "Worm Plot Example")
car::WormPlot(data$Value ~ data$Group,
type = "l",
col = c("red", "green", "blue"),
xlab = "Group",
ylab = "Value",
main = "Worm Plot Example")
library(car)
car::WormPlot(data$Value ~ data$Group,
type = "l",
col = c("red", "green", "blue"),
xlab = "Group",
ylab = "Value",
main = "Worm Plot Example")
install.packages("ggalt")
install.packages("proj4")
library(chatgpt)
cat(ask_chatgpt("What do you think about R language?"))
library(chatgpt)
Sys.setenv(OPENAI_API_KEY = "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")
cat(ask_chatgpt("What do you think about R language?"))
ask_chatgpt("What do you think about R language?")
ask_chatgpt("What time is it in Monterrey Mexico?")
library(chatgpt)
Sys.setenv(OPENAI_API_KEY = "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")
cat(ask_chatgpt("What do you think about R language?"))
ask_chatgpt("What do you think about R language?")
ask_chatgpt("What time is it in Monterrey Mexico?")
library(chatgpt)
Sys.setenv(OPENAI_API_KEY = "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")
cat(ask_chatgpt("What do you think about R language?"))
ask_chatgpt("What do you think about R language?")
chatgpt::explain_code(library(ggplot2)
ggplot(SoftSkillsCentrality, aes(x=reorder(SS, Eigen.vector), y=Eigen.vector)) +
chatgpt::explain_code(ggplot(SoftSkillsCentrality, aes(x=reorder(SS, Eigen.vector), y=Eigen.vector)) +
scale_fill_discrete(name="Academic Program") +
geom_point(size=5, aes(colour=Level), alpha=0.6) +
# Use a larger dot
theme_bw() +
theme(axis.text.x = element_text(angle=60, hjust=1),
panel.grid.major.y = element_line(colour="grey60", linetype="dashed"),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_line(colour="grey60", linetype="dashed"),) +
coord_flip() + theme(legend.position="top") +
theme(axis.text.x=element_text(size=25, colour="black")) +
theme(axis.text.y=element_text(size=25, colour="black")) +
theme(axis.title.x=element_text(face="italic", colour="black", size=25)) +
theme(axis.title.y=element_text(face="italic", colour="black", size=25)) +
xlab("Soft Skills") +
ylab("Eigenvector Centrality") +
theme(legend.position=c(0.95,0.1), legend.justification=c(0.95,0.1)) )
library(chatgpt)
OPENAI_API_KEY=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
usethis::edit_r_environ()
cat(ask_chatgpt("What do you think about R language?"))
usethis::edit_r_environ()
usethis::edit_r_environ()
library(chatgpt)
cat(ask_chatgpt("What do you think about R language?"))
install.packages(c("blob", "commonmark", "gtable", "htmlwidgets", "insight", "mlr3", "paradox", "partykit", "psych", "qpdf", "servr", "tibble", "XML"))
install.packages("openai")
library(tidyr)
table4a
table4a <- table4a
View(table4a)
library(bibliometrix)
biblioshiny()
install.packages(c("chatgpt", "dbplyr", "dplyr", "dtplyr", "googledrive", "GPArotation", "gtable", "hms", "modelr", "pillar", "ps", "qgraph", "quanteda.textmodels", "vctrs"))
library(openai)
library(bibliometrix)
biblioshiny()
install.packages(c("cli", "datawizard", "dendextend", "FactoMineR", "gdtools", "glmnet", "googlesheets4", "htmltools", "parallelly", "RCurl", "rmarkdown", "xfun"))
library(bibliometrix)
biblioshiny()
install.packages(c("datawizard", "ggplot2", "ps", "ranger"))
library(bibliometrix)
biblioshiny()
load("~/Documents/GitHub/citizenscience/PreprocessedData/CitizenScience.RData")
load("~/Documents/GitHub/citizenscience/PreprocessedData/CitizenScience.RData")
View(M)
library(tidyverse)
Psy1 <- M %>% filter(., grepl('psycho', TI))
Psy1 <- M %>% filter(., grepl('psych', TI))
Psy1 <- M %>% filter(., grepl('PSYCH', TI))
Psy2 <- M %>% filter(., grepl('PSYCH', AB))
Psy <- cbind(Psy1, Psy2)
Psy <- rbind(Psy1, Psy2)
Psy <- Psy[!duplicated(Psy), ]
View(Psy)
rm(list=setdiff(ls(), "Psy"))
M <- Psy
rm(list=setdiff(ls(), "M"))
save.image("~/Documents/GitHub/citizenscience/PreprocessedData/Psy-relatedPubs.RData")
biblioshiny()
biblioshiny()
load("~/Documents/GitHub/citizenscience/PreprocessedData/Psy-relatedPubs.RData")
library(bibliometrix)
results <- biblioAnalysis(M, sep = ";")
summary(object = results, k = 10, pause = FALSE)
save.image("~/Pave.RData")
biblioshiny()
load("~/Documents/GitHub/citizenscience/PreprocessedData/CitizenScience.RData")
library(tidyverse)
Psy1 <- M %>% filter(., grepl('PSYCH', TI))
Psy2 <- M %>% filter(., grepl('PSYCH', AB))
Psy3 <- M %>% filter(., grepl('MENTAL', TI))
View(Psy3)
Psy4 <- M %>% filter(., grepl('MENTAL', AB))
Psy <- rbind(Psy1, Psy2, Psy3, Psy4)
15+97+382+1977
Psy <- Psy[!duplicated(Psy), ]
rm(list=setdiff(ls(), "Psy"))
M <- Psy
rm(list=setdiff(ls(), "M"))
save.image("~/Documents/GitHub/citizenscience/PreprocessedData/Psy-relatedPubs.RData")
load("~/Documents/GitHub/citizenscience/PreprocessedData/Psy-relatedPubs.RData")
library(bibliometrix)
results <- biblioAnalysis(M, sep = ";")
summary(object = results, k = 10, pause = FALSE)
save.image("~/Documents/GitHub/citizenscience/PreprocessedData/Psy-relatedPubs.RData")
biblioshiny()
load("~/Documents/GitHub/citizenscience/PreprocessedData/CitizenScience.RData")
results <- biblioAnalysis(M, sep = ";")
summary(object = results, k = 10, pause = FALSE)
biblioshiny()
View(M)
View(M)
citation("base")
citation("igraph")
install.packages(c("correlation", "ellipse", "lattice", "OpenMx", "parameters", "quanteda.textplots", "RcppArmadillo", "readtext"))
library(readr)
Internos <- read_csv("Internos.csv")
library(igraph)
int <- as.matrix(Internos)
net1 <- graph_from_edgelist(int, directed = FALSE)
summary(net1)
plot(net1,
displaylabels = TRUE,
edge.width=0.5,
vertex.label.cex=0.6,
vertex.shape = "circle",
vertex.color = "white",
vertex.frame.color = "gray",
vertex.label.font=1,
layout =   layout_as_star)
install.packages(c("afex", "processx", "TH.data", "tinytex", "zip"))
library(readr)
Internos <- read_csv("Internos.csv")
library(igraph)
int <- as.matrix(Internos)
net1 <- graph_from_edgelist(int, directed = FALSE)
summary(net1)
plot(net1,
displaylabels = TRUE,
edge.width=0.5,
vertex.label.cex=0.6,
vertex.shape = "circle",
vertex.color = "white",
vertex.frame.color = "gray",
vertex.label.font=1,
layout =   layout_as_star)
library(bibliometrix)
biblioshiny()
library(bibliometrix)
install.packages("bibliometrix")
library(bibliometrix)
biblioshiny()
install.packages("tidygraph")
biblioshiny()
install.packages("ggraph")
biblioshiny()
install.packages("sparkline")
biblioshiny()
library(bibliometrix)
biblioshiny
biblioshiny()
install.packages(c("rlang", "vroom"))
library(bibliometrix)
biblioshiny()
biblioshiny()
load("~/Documents/Paper Mirari/Mirari.RData")
results <- biblioAnalysis(M, sep = ";")
citations(M, field = "source", sep = ";")
library(bibliometrixData)
data(scientometrics, package = "bibliometrixData")
View(scientometrics)
nexus <- thematicEvolution(scientometrics,field="ID", years=years, n=100,minFreq=2)
years=c(2000)
nexus <- thematicEvolution(scientometrics,field="ID", years=years, n=100,minFreq=2)
years=c(2013, 2016, 2019, 2022)
nexus <- thematicEvolution(M,field="ID", years=years, n=100,minFreq=2)
years=c(2013, 2016, 2019, 2021)
nexus <- thematicEvolution(M,field="ID", years=years, n=100,minFreq=2)
plot(nexus)
View(nexus)
nexus
networkStat(nexus)
networkPlot(nexus)
res <- thematicMap(M, field = "ID", n = 250, minfreq = 5, size = 0.5, repel = TRUE)
plot(res$map)
res <- thematicMap(M, field = "ID", n = 1709, minfreq = 5, size = 0.5, repel = TRUE)
View(M)
View(M)
plot(res$map)
View(scientometrics)
load("~/Documents/Paper Mirari/Mirari.RData")
net <- biblioNetwork(M, analysis = "keywords", network = "co-occurrence")
M1 <- M %>% filter(PY <= 2013)
M2 <- M %>% filter(PY >= 2014 & PY<= 2016)
summary(M2$PY)
M3 <- M %>% filter(PY <= 2019 & PY >= 2017)
summary(M3$PY)
#2011-2013, 2014-2016, 2017-2019, 2020-2022
M1 <- M %>% filter(PY <= 2013)
M2 <- M %>% filter(PY >= 2014 & PY<= 2016)
M3 <- M %>% filter(PY <= 2019 & PY >= 2017)
M4 <- M %>% filter(PY<=2022 & PY >= 2020)
res1 <- thematicMap(M1, field = "ID", n = 357, minfreq = 5, size = 0.5, repel = TRUE)
res2 <- thematicMap(M2, field = "ID", n = 357, minfreq = 5, size = 0.5, repel = TRUE)
res3 <- thematicMap(M3, field = "ID", n = 357, minfreq = 5, size = 0.5, repel = TRUE)
res4 <- thematicMap(M4, field = "ID", n = 357, minfreq = 5, size = 0.5, repel = TRUE)
plot(res1$map)
plot(res2$map)
plot(res3$map)
plot(res4$map)
plot(res1$map)
plot(res2$map)
plot(res3$map)
plot(res4$map)
plot(res1$map)
View(res1)
plot(res1$map)
load("~/Documents/Paper Mirari/Mirari.RData")
#2011-2013, 2014-2016, 2017-2019, 2020-2022
M1 <- M %>% filter(PY <= 2013)
M2 <- M %>% filter(PY >= 2014 & PY<= 2016)
M3 <- M %>% filter(PY <= 2019 & PY >= 2017)
M4 <- M %>% filter(PY<=2022 & PY >= 2020)
res1 <- thematicMap(M1, field = "ID", n = 357, minfreq = 5, size = 0.5, repel = TRUE)
res2 <- thematicMap(M2, field = "ID", n = 383, minfreq = 5, size = 0.5, repel = TRUE)
res3 <- thematicMap(M3, field = "ID", n = 419, minfreq = 5, size = 0.5, repel = TRUE)
res4 <- thematicMap(M4, field = "ID", n = 550, minfreq = 5, size = 0.5, repel = TRUE)
plot(res1$map)
load("~/Documents/Paper Mirari/Mirari.RData")
#2011-2013, 2014-2016, 2017-2019, 2020-2022
M1 <- M %>% filter(PY <= 2013)
library(bibliometrix)
load("~/Documents/Paper Mirari/Mirari.RData")
#2011-2013, 2014-2016, 2017-2019, 2020-2022
M1 <- M %>% filter(PY <= 2013)
#2011-2013, 2014-2016, 2017-2019, 2020-2022
library(dplyr)
M1 <- M %>% filter(PY <= 2013)
M2 <- M %>% filter(PY >= 2014 & PY<= 2016)
M3 <- M %>% filter(PY <= 2019 & PY >= 2017)
M4 <- M %>% filter(PY<=2022 & PY >= 2020)
summary(M3$PY)
filter
res1 <- thematicMap(M1, field = "ID", n = 357, minfreq = 5, size = 0.5, repel = TRUE)
res2 <- thematicMap(M2, field = "ID", n = 383, minfreq = 5, size = 0.5, repel = TRUE)
res3 <- thematicMap(M3, field = "ID", n = 419, minfreq = 5, size = 0.5, repel = TRUE)
res4 <- thematicMap(M4, field = "ID", n = 550, minfreq = 5, size = 0.5, repel = TRUE)
plot(res1$map)
plot(res2$map)
plot(res3$map)
plot(res4$map)
View(res1)
plot(res1$net)
WA <- cocMatrix(M1, Field = "AU", type = "sparse", sep = ";")
plot(WA)
years <- c(res1, res2, res3, res4)
nexus <- thematicEvolution(M,field="ID", years=years, n=100,minFreq=2)
View(years)
years <- c(2013, 2016, 2019, 2022)
nexus <- thematicEvolution(M,field="ID", years=years, n=100,minFreq=2)
years <- c(2013, 2016, 2019, 2021)
nexus <- thematicEvolution(M,field="ID", years=years, n=100,minFreq=2)
plot(nexus)
View(nexus)
networkPlot(nexus)
networkPlot(nexus$Net)
plot(nexus$Net)
nexus$Net
class(nexus$Net)
plotThematicEvolution(nexus$Nodes, nexus$Edges)
plotThematicEvolution(nexus$Nodes, nexus$Edges, measure = "weighted")
plotThematicEvolution(nexus$Nodes, nexus$Edges, measure = "weighted", min.flow = 0)
plotThematicEvolution(nexus$Nodes, nexus$Edges, measure = "inclusion", min.flow = 0)
plotThematicEvolution(nexus$Nodes, nexus$Edges, measure = "stability", min.flow = 0)
View(M)
years <- c(2011, 2022)
nexus <- thematicEvolution(M,field="ID", years=years, n=100,minFreq=2)
years <- c(2011, 2021)
nexus <- thematicEvolution(M,field="ID", years=years, n=100,minFreq=2)
plotThematicEvolution(nexus$Nodes, nexus$Edges, measure = "stability", min.flow = 0)
nexus <- thematicEvolution(M,field="ID", years=years, n=100,minFreq=1)
plotThematicEvolution(nexus$Nodes, nexus$Edges, measure = "stability", min.flow = 0)
nexus <- thematicEvolution(M,field="ID", years=years, n=1709,minFreq=1)
nexus <- thematicEvolution(M,field="ID", years=years, n=1709,minFreq=5)
plotThematicEvolution(nexus$Nodes, nexus$Edges, measure = "stability", min.flow = 0)
View(M4)
View(M)
#2011-2013, 2014-2016, 2017-2019, 2020-2022
M[nrow(M) + 1,] <- c(PY = 2023)
#2011-2013, 2014-2016, 2017-2019, 2020-2022
years <- c(2013, 2016, 2019, 2022)
nexus <- thematicEvolution(M,field="ID", years=years, n=1709,minFreq=5)
plotThematicEvolution(nexus$Nodes, nexus$Edges, measure = "stability", min.flow = 0)
View(nexus)
View(M)
nexus <- thematicEvolution(M,field="ID", years=years, n=1710,minFreq=5)
library(bibliometrix)
load("~/Documents/Paper Mirari/Mirari.RData")
years <- c(2013, 2016, 2019, 2022)
nexus <- thematicEvolution(M,field="ID", years=years, n=1710,minFreq=5)
years <- c(2014, 2018, 2019)
nexus <- thematicEvolution(M,field="ID", years=years, n=1710,minFreq=5)
plotThematicEvolution(nexus$Nodes, nexus$Edges, measure = "stability", min.flow = 0)
years <- c(2014, 2018, 2022)
nexus <- thematicEvolution(M,field="ID", years=years, n=1710,minFreq=5)
years <- c(2014, 2018, 2022)
nexus <- thematicEvolution(M,field="ID", years=years, n=1710,minFreq=5)
years <- c(2014, 2022)
nexus <- thematicEvolution(M,field="ID", years=years, n=1710,minFreq=5)
years <- c(2021, 2022)
nexus <- thematicEvolution(M,field="ID", years=years, n=1710,minFreq=5)
years <- c(2020, 2022)
nexus <- thematicEvolution(M,field="ID", years=years, n=1710,minFreq=5)
#2011-2013, 2014-2016, 2017-2019, 2020-2022
M[nrow(M$PY) + 1,] <- c(PY = 2023)
View(M)
years <- c(2019, 2021)
nexus <- thematicEvolution(M,field="ID", years=years, n=1710,minFreq=5)
plotThematicEvolution(nexus$Nodes, nexus$Edges, measure = "stability", min.flow = 0)
years <- c(2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,2020,2021)
nexus <- thematicEvolution(M,field="ID", years=years, n=1710,minFreq=5)
plotThematicEvolution(nexus$Nodes, nexus$Edges, measure = "stability", min.flow = 0)
years <- c(2012, 2014, 2016, 2018, 2020)
nexus <- thematicEvolution(M,field="ID", years=years, n=1710,minFreq=5)
plotThematicEvolution(nexus$Nodes, nexus$Edges, measure = "stability", min.flow = 0)
years <- c(2013, 2016, 2019, 2022)
nexus <- thematicEvolution(M,field="ID", years=years, n=1710,minFreq=5)
years <- c(2011, 2022)
nexus <- thematicEvolution(M,field="ID", years=years, n=1710,minFreq=5)
biblioshiny()
install.packages(c("cachem", "graphlayouts", "later", "viridis", "viridisLite", "waldo"))
library(bibliometrix)
load("~/Documents/Paper Mirari/Mirari.RData")
years <- c(2012, 2014, 2016, 2018, 2020, 2022)
nexus <- thematicEvolution(M,field="ID", years=years, n=1710,minFreq=15)
years <- c(2012, 2014, 2016, 2018, 2020)
nexus <- thematicEvolution(M,field="ID", years=years, n=1710,minFreq=15)
plotThematicEvolution(nexus$Nodes, nexus$Edges, measure = "stability")
library(bibliometrix)
biblioshiny()
library(bibliometrix)
biblioshiny()
setwd(dirname(getActiveDocumentContext()$path))
setwd()
library(shiny)
library(readtext)
library(quanteda)
# Define the UI
ui <- fluidPage(
titlePanel("Text Analysis App"),
sidebarLayout(
sidebarPanel(
textInput(inputId = "text", label = "Enter text"),
actionButton(inputId = "submit", label = "Submit")
),
mainPanel(
textOutput(outputId = "summary")
)
)
)
# Define the server
server <- function(input, output) {
output$summary <- renderText({
text <- input$text
# Create a corpus object from the text
corpus <- corpus(text)
# Get the summary of the corpus object
summary(corpus)
})
}
# Run the app
shinyApp(ui, server)
setwd("~/Documents/GitHub/SoftSkillsUniversityPrograms/Paper Soft Skills Sampled Programs")
